<<<<<<< HEAD:Main.as
package  {		import flash.display.Sprite;	import flash.display.StageScaleMode;	import flash.display.StageAlign;
	import flash.display.DisplayObject;
	import flash.display.StageDisplayState;

	import flash.events.MouseEvent;
	import flash.events.Event;

	import flash.text.TextField;
	import com.all.Node;	import com.all.DataImporter;	import com.all.LoadCompleteEvent;	import com.all.NodeList;	import com.all.BudgetNodeLists;
	import com.all.Year;
	import com.all.BudgetButton;
	import com.all.YearVis;
/*	import com.all.BarGraph;	import com.all.LineGraph;	import com.all.NodeGraph;
*/		public class Main extends Sprite{		// Container for all important nodelists the application should knwo about
		private var _years:Array = new Array();
		private var _curYear:YearVis = null;
		private var _budgetBtns:Array = new Array();
		public static var _stage:DisplayObject;		public function Main() {			trace("Main::Main() - Sprite Created");
			_stage = stage;
		
			// Import Data			var importer:DataImporter = new DataImporter();			importer.addEventListener(LoadCompleteEvent.LD_COMPLETE,									  loadCompleteHandler);			importer.importGraphML("graphml.xml");						// Set the stage properties			stage.align = StageAlign.TOP_LEFT;
			stage.scaleMode = StageScaleMode.NO_SCALE;
			stage.addEventListener(Event.RESIZE, resizeHandler);

			// Set the background white!			
			graphics.beginFill(0xFFFFFF,1.0);
			graphics.drawRect(0,0,stage.stageWidth,stage.stageHeight);
			graphics.endFill();
			// Going to just wait for load to complete...
			return;		}		/*     * What do to once, the graphml data has been loaded.     * Basically an extension of the Main Constructor.     */		private function loadCompleteHandler(event:LoadCompleteEvent):void {
			trace("Main::loadCompleteHandler() - Completed Loading Data");

			var temp_nodelists:BudgetNodeLists;
			
			// Load 4 years of data			_years[Year.Y_2011] = new YearVis(event.lists,
																				stage.stageWidth,
																				stage.stageHeight);
			_years[Year.Y_2011].draw();
			trace("Main::loadCompleteHandler() - 2011 Loaded");

			temp_nodelists = _years[Year.Y_2011].getNodeLists();
			temp_nodelists = BudgetNodeLists.buildYear(temp_nodelists);
			_years[Year.Y_2010] = new YearVis(temp_nodelists,
																				stage.stageWidth,
																				stage.stageHeight);
			_years[Year.Y_2010].draw();
			trace("Main::loadCompleteHandler() - 2010 Loaded");

			temp_nodelists = _years[Year.Y_2010].getNodeLists();
			temp_nodelists = BudgetNodeLists.buildYear(temp_nodelists);
			_years[Year.Y_2009] = new YearVis(temp_nodelists,
																				stage.stageWidth,
																				stage.stageHeight);
			_years[Year.Y_2009].draw();
			trace("Main::loadCompleteHandler() - 2009 Loaded");

			temp_nodelists = _years[Year.Y_2009].getNodeLists();
			temp_nodelists = BudgetNodeLists.buildYear(temp_nodelists);
			_years[Year.Y_2008] = new YearVis(temp_nodelists,
																				stage.stageWidth,
																				stage.stageHeight);
			_years[Year.Y_2008].draw();
			trace("Main::loadCompleteHandler() - 2008 Loaded");

			setYear(_years[Year.Y_2011]);
			buildYearButtons();
			return;		}		
		private function buildYearButtons():void {
			trace("Main::buildYearButtons() - Building The Buttons to Switch Years");

			var i:int;
			var x:int = 5;
			var budgetbtn:BudgetButton;

			for (i=0;i<_years.length;i++){

				// Setup a new button
				budgetbtn = new BudgetButton(100,15,5,2,0xFFFFFF,Year.yearStrs[i],0x000000);
				budgetbtn.setYear(_years[i]);
				budgetbtn.x = x + i*budgetbtn.width;
				budgetbtn.y = 5;

				// Add to the display
				addChild(budgetbtn);
				_budgetBtns.push(budgetbtn);
				budgetbtn.addEventListener(MouseEvent.CLICK,yearButtonHandler,false,0,false);
				x += 5;		
			}

			return;
		}

		private function yearButtonHandler(event:MouseEvent):void {
			trace("Main::yearButtonHandler() - Year Button has been selected");
			var budgetbtn:BudgetButton = BudgetButton(event.target);
			setYear(budgetbtn.getYear());
			return;
		}

		/*
     * Sets the year to be displayed on the application.
     * A change in the year brings back the same state of the old year
     * that was left off.
     */
		private function setYear(year:YearVis):void {

			trace("Main::setYear() - Setting the Year to be Visualized");

			var i:int;

			if (_curYear != year){
				if (_curYear != null){
					removeChild(_curYear);
					_curYear.turnOffListeners();
				} 
				_curYear = year;
				_curYear.turnOnListeners();
				addChild(_curYear);
				for (i=0;i<_budgetBtns.length;i++){
					addChild(_budgetBtns[i]);
				}
			} else {
				trace("Main::setYear() - Selected a currently selected year");
			}

			return;
		}
		// Redraw each year		private function repositionObjects():void {

			var i:int;

			for (i=0;i<_years.length;i++){
				_years[i].resize(stage.stageWidth,stage.stageHeight);
			}

			return;		}				/*     * Called when the application is resized     */				public function resizeHandler(event:Event):void {			trace("Main::resizeHandler() - stageWidth: " + stage.stageWidth
				+ " stageHeight: " + stage.stageHeight);
			repositionObjects();
			graphics.beginFill(0xFFFFFF,1.0);
			graphics.drawRect(0,0,stage.stageWidth,stage.stageHeight);
			graphics.endFill();

			return;		}	}	}
=======
﻿package  {		import flash.display.Sprite;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import flash.display.DisplayObject;	import flash.display.StageDisplayState;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.text.TextField;	import com.all.Node;	import com.all.DataImporter;	import com.all.LoadCompleteEvent;	import com.all.NodeList;	import com.all.BudgetNodeLists;	import com.all.Year;	import com.all.BudgetButton;	import com.all.YearVis;		public class Main extends Sprite{		// Container for all important nodelists the application should knwo about				public static var _years:Array = new Array();		private var _curYear:YearVis = null;		private var _budgetBtns:Array = new Array();		public static var _stage:DisplayObject;		public function Main() {			trace("Main::Main() - Sprite Created");			_stage = stage;					// Import Data			var importer:DataImporter = new DataImporter();			importer.addEventListener(LoadCompleteEvent.LD_COMPLETE,									  loadCompleteHandler);			importer.importGraphML("graphml.xml");						// Set the stage properties			stage.align = StageAlign.TOP_LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.addEventListener(Event.RESIZE, resizeHandler);			// Set the background white!						graphics.beginFill(0xFFFFFF,1.0);			graphics.drawRect(0,0,stage.stageWidth,stage.stageHeight);			graphics.endFill();			// Going to just wait for load to complete...			return;		}		/*     * What do to once, the graphml data has been loaded.     * Basically an extension of the Main Constructor.     */		private function loadCompleteHandler(event:LoadCompleteEvent):void {			trace("Main::loadCompleteHandler() - Completed Loading Data");			var temp_nodelists:BudgetNodeLists;						// Load 4 years of data			_years[Year.Y_2011] = new YearVis(event.lists,																				stage.stageWidth,																				stage.stageHeight);			_years[Year.Y_2011].draw();			trace("Main::loadCompleteHandler() - 2011 Loaded");			temp_nodelists = _years[Year.Y_2011].getNodeLists();			temp_nodelists = BudgetNodeLists.buildYear(temp_nodelists);			_years[Year.Y_2010] = new YearVis(temp_nodelists,																				stage.stageWidth,																				stage.stageHeight);			_years[Year.Y_2010].draw();			trace("Main::loadCompleteHandler() - 2010 Loaded");			temp_nodelists = _years[Year.Y_2010].getNodeLists();			temp_nodelists = BudgetNodeLists.buildYear(temp_nodelists);			_years[Year.Y_2009] = new YearVis(temp_nodelists,																				stage.stageWidth,																				stage.stageHeight);			_years[Year.Y_2009].draw();			trace("Main::loadCompleteHandler() - 2009 Loaded");			temp_nodelists = _years[Year.Y_2009].getNodeLists();			temp_nodelists = BudgetNodeLists.buildYear(temp_nodelists);			_years[Year.Y_2008] = new YearVis(temp_nodelists,																				stage.stageWidth,																				stage.stageHeight);			_years[Year.Y_2008].draw();			trace("Main::loadCompleteHandler() - 2008 Loaded");			setYear(_years[Year.Y_2011]);			buildYearButtons();			return;		}				private function buildYearButtons():void {			trace("Main::buildYearButtons() - Building The Buttons to Switch Years");			var i:int;			var x:int = 5;			var budgetbtn:BudgetButton;			for (i=0;i<_years.length;i++){				// Setup a new button				budgetbtn = new BudgetButton(100,15,5,2,0xFFFFFF,Year.yearStrs[i],0x000000);				budgetbtn.setYear(_years[i]);				budgetbtn.x = x + i*budgetbtn.width;				budgetbtn.y = 5;				// Add to the display				addChild(budgetbtn);				_budgetBtns.push(budgetbtn);				budgetbtn.addEventListener(MouseEvent.CLICK,yearButtonHandler,false,0,false);				x += 5;					}			return;		}		private function yearButtonHandler(event:MouseEvent):void {			trace("Main::yearButtonHandler() - Year Button has been selected");			var budgetbtn:BudgetButton = BudgetButton(event.target);			setYear(budgetbtn.getYear());			return;		}		/*     * Sets the year to be displayed on the application.     * A change in the year brings back the same state of the old year     * that was left off.     */		private function setYear(year:YearVis):void {			trace("Main::setYear() - Setting the Year to be Visualized");			var i:int;			if (_curYear != year){				if (_curYear != null){					removeChild(_curYear);					_curYear.turnOffListeners();				} 				_curYear = year;				_curYear.turnOnListeners();				addChild(_curYear);				for (i=0;i<_budgetBtns.length;i++){					addChild(_budgetBtns[i]);				}			} else {				trace("Main::setYear() - Selected a currently selected year");			}			return;		}		// Redraw each year		private function repositionObjects():void {			var i:int;			for (i=0;i<_years.length;i++){				_years[i].resize(stage.stageWidth,stage.stageHeight);			}			return;		}				/*     * Called when the application is resized     */				public function resizeHandler(event:Event):void {			trace("Main::resizeHandler() - stageWidth: " + stage.stageWidth				+ " stageHeight: " + stage.stageHeight);			repositionObjects();			graphics.beginFill(0xFFFFFF,1.0);			graphics.drawRect(0,0,stage.stageWidth,stage.stageHeight);			graphics.endFill();			return;		}	}	}
>>>>>>> a608c8e8c49de1c4439a393209676659aaf2a787:Main.as
