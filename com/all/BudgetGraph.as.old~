package com.all {
	
	import flash.display.Sprite;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.utils.Timer;
	import flash.geom.Point;
	
	public class BudgetGraph extends Sprite{

		// The node that has current focus
		private var _centralNode:Node;

		public static var main:BudgetGraph;

		private static const FISH_EYE_TIMER:int = 100;
		private static const SIZE_MULTIPLIER:Number = 25000;

		private var _timer:Timer;
		private var _original:Point;
		private var _original_radius:Number;
		private var _box:HoverBox;
		private var _root_nodes:DisplayNodeList;

		public function BudgetGraph(rootnodes:NodeList):void  {
			// constructor code
			trace("BudgetGraph::BudgetGraph() - Constructing the Budget Graph");
			
			// The Root Node List drawn first (should be the Funds)
			_root_nodes = DisplayNodeList;

			// Setup the fish eye timer
			_timer = new Timer(FISH_EYE_TIMER,0);
			_timer.addEventListener(TimerEvent.TIMER,updateFishEye);

			// Set the Node properties that will determine the size of the drawing
			Node.max_cost = _root_nodes.max_cost;
			Node.multiplier = SIZE_MULTIPLIER;

			// Event Listeners for displaying hover boxes (details of the nodes)
			addEventListener(MouseEvent.MOUSE_OVER, manageMouseOver, true, 0, true);
			addEventListener(MouseEvent.MOUSE_OUT, manageMouseOut, true, 0, true);
			addEventListener(MouseEvent.MOUSE_MOVE, manageMouseMove, true, 0, true);

			// Set the listeners for the fish-eye timer
			addEventListener(MouseEvent.MOUSE_DOWN,manageMouseDown,false,0,true);
			addEventListener(MouseEvent.MOUSE_UP,manageMouseUp,false,0,true);
			
			// Draw a rectangle
			this.opaqueBackground = 0xFFFFFF;
			graphics.beginFill(0xFFFFFF,1.0);
			graphics.drawRect(0,0,x,y);
			graphics.endFill();
			_original = new Point(x,y);
			_original_radius = 0;

			main = this;

			return;
		}

		public function clean():void {

			// Cleanup all event listeners
			_timer.removeEventListener(TimerEvent.TIMER,updateFishEye);
			removeEventListener(MouseEvent.MOUSE_DOWN,manageMouseDown);
			removeEventListener(MouseEvent.MOUSE_UP,manageMouseUp);
			removeEventListener(MouseEvent.ROLL_OVER, manageMouseOver);
			removeEventListener(MouseEvent.ROLL_OUT, manageMouseOut);
			removeEventListener(MouseEvent.MOUSE_MOVE, manageMouseMove);

			main = null;
			_timer = null;
			_box = null;
			_root_nodes = null;

			return;
		}

		/*
     * Draw the budget graph.
     */ 
		public function drawBudgetGraph():void {
			
			trace("BudgetGraph::drawBudgetGraph() - drawing the budget graph "
				+height+","+width);

			_root_nodes.setSearch(true,true);
			_root_nodes.sort(NodeList.HIGH);
			_root_nodes.x = 15;
			_root_nodes.y = this.height/2;
			_original_radius = _root_nodes.getNodeAt(0).getCostRadius();
			_original.x = 15;
			_original.y = this.height/2;
			this.addChild(_root_nodes);
			_root_nodes.drawNodes(DisplayNodeList.DRAW_RIGHT,DisplayNodeList.LEFT);

			return;
		}

		private var _x:int;
		private var _y:int;

		/*
     * Click and Hold Event Handling to redraw with a fish eye.
     */
		private function manageMouseDown(event:MouseEvent):void{
  		trace("BudgetGraph::MOUSE_DOWN");
			_timer.start();
			_y = stage.mouseY;
			return;
		}

		private function manageMouseUp(event:MouseEvent):void{
  		trace("BudgetGraph::MOUSE_UP");
			_timer.stop();
			return;
		}

		private var state:int = 0;

		private function isDown(y_old:Number,y_new:Number):Boolean {
			
			var isDown:Boolean;
		
			if (y_old - y_new > 0){
				isDown = false;
			} else {
				isDown = true;
			}

			return isDown;
		}

		private function getState(isDown:Boolean):Boolean {

			var isUnder:Boolean;
	
			if (isDown){
				state++;
			} else {
		  	state--;
			}

			if (state < 0){
				isUnder = false;
			} else {
				isUnder = true;
			}

			return isUnder;
		}
	
		private function getStateOld():Boolean {

			var isUnder:Boolean;
			var rootNode:Node;
			var origin:Point = new Point();
			var global:Point;

			// Get the root node coordinates
			rootNode = _root_nodes.getNodeAt(0);
			origin.y = rootNode.y;
			origin.x = rootNode.x;

			global = localToGlobal(origin);
			trace("Global",global);
			if (global.y < 0 ){
				trace("I'm Over");
				isUnder = false;
			} else {
				trace("I'm Under");
				isUnder = true;
			}				

			return isUnder;
		}

		private var sizeArray:Array = new Array();
		private var sizeScale:Number = 1.0;

		private function getSizeScaleChange(isUnder:Boolean,isDown:Boolean):Number {

			if (isDown && isUnder){			
				sizeScale = sizeScale*1.05;
				sizeArray.push(sizeScale);
			} else if (isDown && !isUnder){
				sizeScale = sizeArray.pop();
			} else if (!isDown && !isUnder){
				sizeScale = sizeScale*1.05;
				sizeArray.push(sizeScale);
			} else if (!isDown && isUnder){
				sizeScale = sizeArray.pop();
			}

			return sizeScale;
		}

		private function getSizeScaleChangeOld(isUnder:Boolean,isDown:Boolean):Number {

			var scaleChange:Number;

			if (isDown && isUnder){			
					scaleChange = 1.05;
			} else if (isDown && !isUnder){
					scaleChange = 1/1.05;
			} else if (!isDown && !isUnder){
					scaleChange = 1.05;
			} else if (!isDown && isUnder){
					scaleChange = 1/1.05;
			}

			return scaleChange;
		}

		private var posArray:Array = new Array();
		private var posScale:Number = 10;

		private function getPosScaleChange(isUnder:Boolean,isDown:Boolean):Number {

			var scaleChange:Number;

			if (isDown && isUnder){			
				scaleChange = -1.10;
				posScale = Math.abs(posScale)*scaleChange;
				posArray.push(posScale);
			} else if (isDown && !isUnder){
				posScale = -1*posArray.pop();
			} else if (!isDown && !isUnder){
				scaleChange = 1.30;
				posScale = Math.abs(posScale)*scaleChange;
				posArray.push(posScale);
			} else if (!isDown && isUnder){
				posScale = -1*posArray.pop();
			}

			return posScale;
		}

		private function getScaleChangeOld(isUnder:Boolean):Number {

			var scaleChange:Number;

			if (!isUnder){
				scaleChange = stage.mouseY - _y;
			} else {
				scaleChange = _y - stage.mouseY;
			}					

			return scaleChange;
		}

		private function scaleAndMove(isDown:Boolean,isUnder:Boolean,
			reset:Boolean = false):void {

			var posScaleFactor:Number;
			var sizeScaleFactor:Number;

			// Scale the graph
			if (reset){
				trace("Reset!");
				_root_nodes.scaleX = 1.0;
				_root_nodes.scaleY = 1.0;
				_root_nodes.y = _original.y;
				_root_nodes.x = 15;
				posScale = 10;
				sizeScale = 1.0;
			} else {
				sizeScaleFactor = getSizeScaleChange(isUnder,isDown);
				_root_nodes.scaleX = sizeScaleFactor;      
				_root_nodes.scaleY = sizeScaleFactor;

				// Move the graph
				posScaleFactor = getPosScaleChange(isUnder,isDown);
				_root_nodes.y += posScaleFactor;
				_root_nodes.x = _original.x + _original_radius*(1-_root_nodes.scaleX);

				trace("states[",isDown,isUnder,
					"]:p-factor[",posScaleFactor,
					"]:s-factor[",sizeScaleFactor,"]");
			}

			return;
		}

		/*
     * Zoom in or out, depending on the direction of movement.
     */
		private function updateFishEye(event:TimerEvent):void {
			//trace("BudgetGraph::updateFishEye() - BANG!");

			var scaleChange:Number;
			var isUnder:Boolean;
			var dirState:Boolean;

			if (stage.mouseY != _y){

				dirState = isDown(_y,stage.mouseY);
				isUnder = getState(dirState);

				// Don't scale and move at zero
				if (state == 0){
					scaleAndMove(dirState,isUnder,true);
				} else {
					scaleAndMove(dirState,isUnder);
				}

				_y = stage.mouseY;
			}
		
			setBoxAtMouse();
			return;			
		}

 		/*
		 * Show the details of a node when the user hovers over it.
		 */
		public function manageMouseOver(event:MouseEvent):void{
			if (event.target is Node && _box == null){
				_box = new HoverBox(Node(event.target));
				_box.draw();
				addChild(_box);
			}
			return;
		}
 
		public function manageMouseOut(event:MouseEvent):void{
			if (_box != null && event.target is Node){
				removeChild(_box);
				_box = null;
			}
			return;
		}

		private function setBoxAtMouse():void {
			
			if (_box != null){
				_box.x = stage.mouseX;
				_box.y = stage.mouseY;
			}

			return;
		}

		private function manageMouseMove(event:MouseEvent):void{
			var target:* = event.target;
			if (_box && event.target is Node){
				_box.x = stage.mouseX;
				_box.y = stage.mouseY;
			}
			return;
		}

	}
	
}
